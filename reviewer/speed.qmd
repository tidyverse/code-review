# Speed of reviews {#sec-speed}

## Why should code reviews be fast? {#why}

The speed of an individual developer is important, but the speed at which a *team* of developers can produce high quality code is even more important.
When code reviews are slow, several things happen:

-   **Developers start to protest the code review process.** If a reviewer only responds every few days, but requests major changes to the PR each time, that can be frustrating and difficult for the author.
    If the reviewer requests the *same* substantial changes (changes which really do improve code health), but responds *quickly* every time the author makes an update, the frustration tends to disappear.
    **Most complaints about the code review process are actually resolved by making the process faster.**

-   **The velocity of the team as a whole is decreased.** Yes, the individual who doesn't respond quickly to the review gets other work done.
    However, new features and bug fixes for the rest of the team are delayed by days, weeks, or months as each PR waits for review.

-   **Code health can be impacted.** When reviews are slow, authors are actually incentivized to submit *fewer* PRs and to make each one *larger*.
    If you think that it is going to take days to get a single small change reviewed, you are going to be pressured to include *one more thing* in your PR just to avoid another multi-day review process.
    To ensure that each PR only improves the health of the codebase, code review must be fast enough that authors don't feel hamstrung by it.

## What do we mean by "fast"?

Rather than suggesting average turnaround times for a PR review (such as 2-4 hours), we feel that it is more useful to categorize PRs under different [patterns of collaboration](#sec-patterns-of-collaboration).
This recognizes the fact that each PR comes with its own context - a time sensitive bug fix that blocks another colleague is going to be reviewed and merged faster than a small typo in a dormant package that isn't actively being worked on.

The most important thing is for the author and reviewer to have similar expectations around the amount of time a PR review may take.
If there is confusion around this, the author and reviewer should discuss this with each other, especially if they are both Posit employees, to ensure that they are on the same page about which [pattern](#sec-patterns-of-collaboration) their style of collaboration falls under (keeping in mind that the patterns can be modified as needed).

If you are feeling overwhelmed by the amount of PRs that you are in charge of, it is worth reviewing your PR process.
If you have so many PRs to review that you can't get to your own work, then you might need to distribute the reviews across your team more evenly.
Not speaking up when you are overwhelmed by PRs can in turn slow down an entire team!

## Speed vs Interruption {#sec-interruption}

There is one time where the consideration of personal velocity trumps team velocity.
**If you are in the middle of a focused task, such as writing code, don't interrupt yourself to do a code review.** Research has shown that it can take a long time for a developer to get back into a smooth flow of development after being interrupted.
So interrupting yourself while coding is actually *more* expensive to the team than making a PR author wait a bit for a code review.
If you want to read more about this, Paul Graham's post on [Maker vs Manager](http://www.paulgraham.com/makersschedule.html) is very good.

Instead, wait for a break point in your work before you respond to a request for review.
This could be when your current coding task is completed, after lunch, returning from a meeting, coming back from the breakroom, etc.
Most "deep work" sessions last around 2-3 hours, so batching your code reviews and handling multiple of them at once after a focused session often works well.

## Detailed review

With all of this discussion about speed, it can be tempting to just do a surface level review and respond with "LGTM." Resist this temptation!
The whole [purpose of code review](#sec-purpose) is to ensure that the code health of the code base is improving, and you are unlikely to catch potential bugs with a surface level review.

PRs vary greatly in their complexity and sufficiently carrying out the review can take a non-trivial amount of time and cognitive effort.
In general:

-   **Small PRs** take anywhere from **5-15 minutes** and don't typically require checking the code out locally.
    This should be the majority of code reviews that tackle small bugs or documentation changes.
    You should typically be able to "run" the code related to these changes in your head.

-   **Medium PRs** take up to **30 minutes** and often involve using `usethis::pr_fetch()` and exploring the code locally.
    This typically includes PRs that implement new features or small UI changes.

-   **Large PRs** can take up to **1 hour**, and occasionally even longer.
    These should be very rare, and are reserved for large refactorings, especially if there are unavoidable behavior changes mixed in.
    Large PRs are typically undesirable because they slow the velocity of the entire team, so typically the reviewer should ask the author if the PR can be [split into multiple smaller PRs](#sec-small).
    If you don't have time to review a large PR and it can't be made any smaller, provide some broad comments on the design of the PR, and consider requesting another colleague to take a look.

## Cross time zone reviews {#sec-cross-time-zone}

Dealing with time zone differences can be challenging, but when the author and reviewer are [working together closely](#sec-close-knit-collaboration) it is reasonable for the reviewer to ensure that they provide feedback before the author starts work the next day.
If more rapid turnaround times are needed, then the author should communicate that with the reviewer and attempt to batch multiple PRs in parallel, or set aside a predetermined time during the day when both the author and reviewer are online for review.

## Approve with comments {#sec-approve-with-comments}

The most common kind of PR review within the tidyteam group is known as "approved with comments." It involves leaving a few minor comments on a PR, while also hitting the `Approve` button on the GitHub review UI:

![](img/approve-with-comments.png){fig-align="center" width="600"}

This gives the PR author permission to merge the PR as soon as they have addressed the comments without needing to request another round of review.
This is done when either:

-   The reviewer is confident that the author will appropriately address all the reviewer's remaining comments.
-   The remaining changes are minor and don't *have* to be done by the author.

Approving with comments is largely about the experience of the PR author.
For new authors that are still being onboarded, it is common for reviewers to use the `Comment` option instead, which is a signal to the author that they should request another round of review when they have finished addressing your comments.
It is important to remember to be patient with new developers; they are going to need multiple rounds of detailed reviews early on, but putting in this extra effort up front tends to lead to faster PRs in the future as the author learns more about what is expected from their PRs.

## Requesting changes {#sec-request-changes}

GitHub also includes a third option when submitting a review, `Request changes`.
This is typically reserved for more drastic changes that absolutely require another round of review.
This option is rare to see in [close-knit collaboration](#sec-close-knit-collaboration), when both the author and reviewer are experts, but is somewhat common when the author is an [understudy](#sec-the-understudy) and with [external contributions](#sec-external-contributions), where the author likely doesn't have as much expertise as the reviewer.
